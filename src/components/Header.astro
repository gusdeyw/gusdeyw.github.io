---
import { siteConfig } from "../config";
import ThemeToggle from "./ThemeToggle.astro";

const hasProjects = siteConfig.projects && siteConfig.projects.length > 0;
const hasExperience = siteConfig.experience && siteConfig.experience.length > 0;
const hasEducation = siteConfig.education && siteConfig.education.length > 0;
---

<header
  id="header"
  class="fixed top-0 left-0 right-0 z-50 transition-all duration-300"
>
  <nav class="max-w-7xl mx-auto px-4 md:px-8 py-4 relative">
    <div class="flex items-center justify-between">
      <!-- Logo/Home link -->
      <a
        href={import.meta.env.BASE_URL || "/"}
        class="text-xl font-bold text-gray-900 dark:text-white hover:opacity-80 transition-opacity"
      >
        {siteConfig.name}
      </a>

      <!-- Desktop Navigation -->
      <ul class="hidden md:flex items-center gap-8">
        <li>
          <a
            href={`${import.meta.env.BASE_URL}/#about`}
            class="text-gray-700 hover:text-black dark:text-gray-300 dark:hover:text-white transition-colors font-medium"
          >
            About
          </a>
        </li>
        {
          hasProjects && (
            <li>
              <a
                href={`${import.meta.env.BASE_URL}/#projects`}
                class="text-gray-700 hover:text-black dark:text-gray-300 dark:hover:text-white transition-colors font-medium"
              >
                Projects
              </a>
            </li>
          )
        }
        {
          hasExperience && (
            <li>
              <a
                href={`${import.meta.env.BASE_URL}/#experience`}
                class="text-gray-700 hover:text-black dark:text-gray-300 dark:hover:text-white transition-colors font-medium"
              >
                Experience
              </a>
            </li>
          )
        }
        {
          hasEducation && (
            <li>
              <a
                href={`${import.meta.env.BASE_URL}/#education`}
                class="text-gray-700 hover:text-black dark:text-gray-300 dark:hover:text-white transition-colors font-medium"
              >
                Education
              </a>
            </li>
          )
        }
      </ul>

      <!-- Right side: Theme toggle and mobile menu button -->
      <div class="flex items-center gap-4">
        <!-- Theme toggle (visible on all screen sizes) -->
        <ThemeToggle />

        <!-- Mobile menu button (only on mobile) -->
        <button
          id="mobile-menu-button"
          class="md:hidden p-2 text-gray-700 hover:text-black dark:text-gray-300 dark:hover:text-white transition-colors"
          aria-label="Toggle mobile menu"
        >
          <svg
            class="w-6 h-6"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Mobile Navigation Menu -->
    <div
      id="mobile-menu"
      class="hidden absolute top-full left-0 right-0 bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700 shadow-lg z-50"
      style="display: none;"
    >
      <ul class="px-4 py-4 space-y-4">
        <li>
          <a
            href={`${import.meta.env.BASE_URL}/#about`}
            class="block text-gray-700 hover:text-black dark:text-gray-300 dark:hover:text-white transition-colors font-medium py-2"
          >
            About
          </a>
        </li>
        {
          hasProjects && (
            <li>
              <a
                href={`${import.meta.env.BASE_URL}/#projects`}
                class="block text-gray-700 hover:text-black dark:text-gray-300 dark:hover:text-white transition-colors font-medium py-2"
              >
                Projects
              </a>
            </li>
          )
        }
        {
          hasExperience && (
            <li>
              <a
                href={`${import.meta.env.BASE_URL}/#experience`}
                class="block text-gray-700 hover:text-black dark:text-gray-300 dark:hover:text-white transition-colors font-medium py-2"
              >
                Experience
              </a>
            </li>
          )
        }
        {
          hasEducation && (
            <li>
              <a
                href={`${import.meta.env.BASE_URL}/#education`}
                class="block text-gray-700 hover:text-black dark:text-gray-300 dark:hover:text-white transition-colors font-medium py-2"
              >
                Education
              </a>
            </li>
          )
        }
      </ul>
    </div>
  </nav>
</header>

<script is:inline>
  // Handle scroll background
  window.addEventListener("scroll", () => {
    const header = document.getElementById("header");
    if (window.scrollY > 100) {
      header?.classList.add(
        "bg-white/80",
        "dark:bg-gray-900/80",
        "backdrop-blur-sm",
      );
    } else {
      header?.classList.remove(
        "bg-white/80",
        "dark:bg-gray-900/80",
        "backdrop-blur-sm",
      );
    }
  });

  // Handle mobile menu toggle
  function initializeMobileMenu() {
    console.log("Initializing mobile menu...");
    const mobileMenuButton = document.getElementById("mobile-menu-button");
    const mobileMenu = document.getElementById("mobile-menu");

    console.log("Mobile menu button:", mobileMenuButton);
    console.log("Mobile menu:", mobileMenu);

    if (!mobileMenuButton || !mobileMenu) {
      console.error("Mobile menu elements not found");
      return;
    }

    mobileMenuButton.addEventListener("click", function (event) {
      event.preventDefault();
      event.stopPropagation(); // Prevent event bubbling

      const isHidden =
        mobileMenu.style.display === "none" ||
        mobileMenu.classList.contains("hidden");

      if (isHidden) {
        mobileMenu.style.display = "block";
        mobileMenu.classList.remove("hidden");
        // Change hamburger to X
        this.innerHTML = `
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        `;
      } else {
        closeMobileMenu();
      }
    });

    // Helper function to close mobile menu
    function closeMobileMenu() {
      mobileMenu.style.display = "none";
      mobileMenu.classList.add("hidden");
      mobileMenuButton.innerHTML = `
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      `;
    }

    // Prevent clicks inside mobile menu from bubbling up
    mobileMenu.addEventListener("click", function (event) {
      event.stopPropagation();
    });

    // Close mobile menu when clicking on links
    const mobileMenuLinks = mobileMenu.querySelectorAll("a");
    mobileMenuLinks.forEach((link) => {
      link.addEventListener("click", () => {
        console.log("Navigation link clicked, closing menu");
        closeMobileMenu();
      });
    });

    // Close mobile menu when clicking outside (with delay to prevent immediate firing)
    setTimeout(() => {
      document.addEventListener("click", function (event) {
        const isClickInsideMenu = mobileMenu.contains(event.target);
        const isClickOnButton = mobileMenuButton.contains(event.target);
        const isMenuVisible =
          mobileMenu.style.display === "block" &&
          !mobileMenu.classList.contains("hidden");

        console.log(
          "Click detected - Menu visible:",
          isMenuVisible,
          "Display:",
          mobileMenu.style.display,
        );

        if (!isClickInsideMenu && !isClickOnButton && isMenuVisible) {
          console.log("Clicked outside menu, closing");
          closeMobileMenu();
        }
      });
    }, 100);
  }

  // Initialize when DOM is ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeMobileMenu);
  } else {
    initializeMobileMenu();
  }
</script>

<style>
  html {
    scroll-behavior: smooth;
  }
</style>
